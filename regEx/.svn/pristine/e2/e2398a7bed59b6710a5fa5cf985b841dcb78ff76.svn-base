package regEx;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    public static void main(String[] args) throws URISyntaxException, IOException {
        File cityNamesFile = new File(Main.class.getResource("cityNames.txt").toURI().getPath());
        List<String> possibleCities = Files.readAllLines(cityNamesFile.toPath());

        File apartmentsFolder = new File(Main.class.getResource("apartments").toURI().getPath());
        for (File aFile : Objects.requireNonNull(apartmentsFolder.listFiles())) {
            String fileContent = Files.readString(aFile.toPath());
            System.out.println(extractAllValues(fileContent, possibleCities));

        }

        String s = "Zellingen, Tückelhäuser Strasse, 40 m², Büro-, Praxis-,Gewerberäume, sep. Eingang, Stellplatz, 5 EUR/m² + NK zu vermieten. Tel. 0176/51169145";
        System.out.println(extractStringValue(s, getPriceRegEx()));
        System.out.println(extractDoubleValue(s, getPriceRegEx(), 2));
        System.out.println(extractStringValue(s, getCityRegEx(possibleCities)));
        //String s = "'Arnstein - komf. 4-Zi-Whg, 95m2, Parkett, EBK, sep. WC, Energiepass, Balkon, Garage, Keller, ab 01.01.17. Tel. 09353/99284 ab 10.10.2016";
        //String s = "Helle, 900,12 EUR, moderne 2 1/2 Zimmer, ca. 55 m2, mit EBK, Terr. u. Stellplatz, in Rimpar ab 15. 11. an Single, Tel. 0171/7478844";
        //String s = "1234,56";
        /*System.out.println(extractStringValue(s,getCityRegEx(possibleCities)));
        System.out.println(extractStringValue(s, getLivingSpaceRegEx()));
        System.out.println(extractDoubleValue(s, getLivingSpaceRegEx(), 2));
        System.out.println(extractStringValue(s, getPriceRegEx()));
        System.out.println(extractDoubleValue(s, getPriceRegEx(), 2));
        System.out.println(extractStringValue(s, getPhoneNumberRegEx()));
        //System.out.println(extractDoubleValue(s, getPhoneNumberRegEx(), 2));
        System.out.println(extractStringValue(s, getNumRoomsRegEx()));
        System.out.println(extractDoubleValue(s, getNumRoomsRegEx(), 2));*/
    }


    public static String getCityRegEx(List<String> possibleCities) {
        StringBuilder result = new StringBuilder();
        for (String city : possibleCities) {
            result.append("(" + city + ")([^a-z])|");
        }
        result.deleteCharAt(result.length() - 1);

        return result.toString();
    }

    public static String getLivingSpaceRegEx() {
        //String result = "(\\d+\\sm2)|(\\d+\\sm\\u00B2)|(\\d*.qm)";
        String result = "((\\d+).?m)";
        return result;
    }

    public static String getNumRoomsRegEx() {
        //String result = "(\\d.Z)|(\\d*\\s\\d\\/\\d*)";
        //String result = "((\\d+).Z|\\d+\\s\\d+\\/\\d+)";
        //String result = "((\\d+)(.\\d+.\\d+)?.(Z|D))";
        String result = "(((\\d+)(.?\\d+.\\d+)?).?(Z|D))";
        return result;
    }

    public static String getPriceRegEx() {
        //String result = "([^\\w]\\d*\\.-.[^NK|G|g])|(\\d*.EUR)";
        //String result = "([^\\w]\\d*\\.-.[^NK|G|g])|(\\d*.\\d{3}.E)|(\\d*.\\d*\\sEUR)";
        //String result = "((\\d+[^\\/]\\d+)(.EUR|.-).[^NK])";
        //String result = "(\\w|,).(\\d+.\\d+)(.EUR|.-)";
        //String result = "((\\d+.\\d+)(.EUR|.-.[^NK]))";
        //String result = "((\\d+).?(\\d+)(.?EUR|.-.[^NK|ZW|G]))";
        String result = "((\\d+.?\\d?)(.?EUR|.-.[^NK|ZW|G|\\d]))";
        return result;
    }

    public static String getPhoneNumberRegEx() {
        //String result = "(\\d{4}.\\d*)";
        //String result ="(\\d{5}.\\d*)|(\\d{4}.\\d*)";
        String result = "((\\d{4,}.\\d{4,}))";
        return result;
    }

    public static Double extractDoubleValue(String input, String regEx, int groupNumber) {
        Pattern p = Pattern.compile(regEx);
        Matcher m = p.matcher(input);
        String theGroup;
        if (m.find()) {
            if (groupNumber <= m.groupCount()) {
                theGroup = m.group(groupNumber);
                if (theGroup.matches("[0-9]+")) {
                    return Double.parseDouble(theGroup);
                } else if (theGroup.contains(".")) {
                    theGroup = theGroup.replace(".", "");
                    return Double.parseDouble(theGroup);
                } else if (theGroup.contains(",")) {
                    return Double.parseDouble(theGroup.replaceAll(",", "."));
                } else if (theGroup.contains("/")) {
                    String[] arr = theGroup.split("/");
                    String[] a = arr[0].split(" ");
                    Double d = Double.parseDouble(a[1]) / Double.parseDouble(arr[1]);
                    return (Double.parseDouble(a[0])) + d;
                } else if (theGroup.contains(" ")) {
                    return Double.parseDouble(theGroup.replaceAll(" ", ""));
                }
            } else return null;

        }
        return null;
    }

    public static String extractStringValue(String input, String regEx) {
        Pattern p = Pattern.compile(regEx);
        Matcher m = p.matcher(input);
        StringBuilder sb = new StringBuilder();
        if (regEx.equals("((\\d{4,}.\\d{4,}))")) {
            if (m.find()) {
                return m.group();
            }

        } else {
            while (m.find()) {
                String s = m.group().replaceAll("[:|,|\\u002D|/|)]", "");
                if (s.contains(" ")) {
                    String[] arr = s.split(" ");
                    if (arr.length < 2) {
                        sb.append(arr[0]).append(", ");
                    } else sb.append(s).append(", ");
                } else sb.append(s).append(", ");
            }
            if (sb.toString().isEmpty()) {
                return null;
            } else {
                sb.deleteCharAt(sb.length() - 1);
                sb.deleteCharAt(sb.length() - 1);
                return sb.toString();
            }
        }
        return null;
    }

    public static Apartment extractAllValues(String input, List<String> possibleCities) {
        String city = extractStringValue(input, getCityRegEx(possibleCities));
        Double space = extractDoubleValue(input, getLivingSpaceRegEx(), 2);
        Double rooms = extractDoubleValue(input, getNumRoomsRegEx(), 2);
        Double price = extractDoubleValue(input, getPriceRegEx(), 2);
        String phone = extractStringValue(input, getPhoneNumberRegEx());

        return new Apartment(city, space, rooms, price, phone);
    }
}
