package regEx;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    public static void main(String[] args) throws URISyntaxException, IOException {
        File cityNamesFile = new File(Main.class.getResource("cityNames.txt").toURI().getPath());
        List<String> possibleCities = Files.readAllLines(cityNamesFile.toPath());

        /*File apartmentsFolder = new File(Main.class.getResource("apartments").toURI().getPath());
        for (File aFile : Objects.requireNonNull(apartmentsFolder.listFiles())) {
            String fileContent = Files.readString(aFile.toPath());
            System.out.println(extractAllValues(fileContent, possibleCities));
            }*/

        String s = "Kitzingen und mit vielen neuen Wohnungen";
        System.out.println(extractStringValue(s,getCityRegEx(possibleCities)));
    }

    public static String getCityRegEx(List<String> possibleCities) {
        StringBuilder result = new StringBuilder();
        for (String city : possibleCities) {
            result.append(city + "|");
        }
        result.deleteCharAt(result.length() - 1);
        return result.toString();
    }

    public static String getLivingSpaceRegEx() {
        String result = "(\\d+\\sm2)|(\\d+\\sm\\u00B2)|(\\d*.qm)";
        return result;
    }

    public static String getNumRoomsRegEx() {
        String result = "(\\d.Z)|(\\d*\\s\\d\\/\\d*)";
        return result;
    }

    public static String getPriceRegEx() {
        String result = "([^\\w]\\d*\\.-.[^NK|G|g])|(\\d*.EUR)";
        return result;
    }

    public static String getPhoneNumberRegEx() {
        String result = "(\\d*\\/\\d*)|(\\d{4}.\\d*)";
        return result;
    }

    public static Double extractDoubleValue(String input, String regEx, int groupNumber) {
        Pattern p = Pattern.compile(regEx);
        Matcher m = p.matcher(input);
        if (m.find()) {
            String theGroup = m.group(groupNumber);
            try {
                Double d = Double.parseDouble(theGroup);
                return d;
            } catch (NumberFormatException | NullPointerException nfe) {
                return null;
            }
        }
        return null;
    }

    public static String extractStringValue(String input, String regEx) {
        Pattern p = Pattern.compile(regEx);
        Matcher m = p.matcher(input);
        StringBuilder sb = new StringBuilder();
        while (m.find()){
            sb.append(m.group()).append(", ");
        }
        if (sb.toString().isEmpty()){
            return null;
        }else {
            sb.deleteCharAt(sb.length()-1);
            sb.deleteCharAt(sb.length()-1);
            return sb.toString();
        }
    }

    public static Apartment extractAllValues(String input, List<String> possibleCities) {
        return null;
    }
}
