package jpp.qrcode.encode;

import jpp.qrcode.*;

import java.util.ArrayList;
import java.util.List;

public class MaskSelector {

    public static void placeFormatInformation(boolean[][] res, int formatInformation) {

        String s = Integer.toBinaryString(formatInformation);
        int pos = s.length() - 1;
        for (int i = 0; i < 9; i++) {
            if (i != 6) {
                if (pos >= 0) {
                    if (s.charAt(pos) == '1') {
                        res[i][8] = true;
                    }
                    pos--;
                }
            }
        }
        for (int i = 7; i >= 0; i--) {
            if (i != 6) {
                if (pos >= 0) {
                    if (s.charAt(pos) == '1') {
                        res[8][i] = true;
                    }
                    pos--;
                }
            }
        }
        pos = s.length() - 1;
        for (int i = res.length - 1; i > res.length - 9; i--) {
            if (pos >= 0) {
                if (s.charAt(pos) == '1') {
                    res[8][i] = true;
                }
                pos--;
            }
        }
        for (int i = res.length - 7; i < res.length; i++) {
            if (pos >= 0) {
                if (s.charAt(pos) == '1') {
                    res[i][8] = true;
                }
                pos--;
            }
        }
    }

    public static int calculatePenaltySameColored(boolean[][] data) {
        int counter = 1;
        int punkte = 0;
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = 0; j < data.length - 1; j++) {
                if (data[i][j] == data[i][j + 1]) {
                    counter++;
                    if (counter == 5) {
                        punkte += 3;
                    } else if (counter > 5) {
                        punkte++;
                    }
                } else counter = 1;

            }
        }
        for (int i = 0; i < data.length - 1; i++) {
            for (int j = 0; j < data.length - 1; j++) {
                if (data[j][i] == data[j + 1][i]) {
                    counter++;
                    if (counter == 5) {
                        punkte += 3;
                    } else if (counter > 5) {
                        punkte++;
                    }
                } else counter = 1;

            }
        }
        return punkte;
    }





        /*List<Integer> arr = new ArrayList<>();
        int counter = 0;
        for (int a = 0; a < data.length; a++) {
            int b = 0;
            if (a < data.length - 1 && b < data.length - 1) {
                while (b < data.length - 1 & data[a][b] == data[a][b + 1]) {
                    counter++;
                    b++;

                }
                if (counter > 3) {
                    arr.add(counter);
                }

                counter = 0;
                while (b < data.length - 1 & data[b][a] == data[b + 1][a]) {
                    counter++;
                    b++;
                }
                if (counter > 3) {
                    arr.add(counter);
                }
            }
        }
        int punkte = 0;
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i) == 4) {
                punkte += 3;
            } else {
                for (int j = arr.get(i) - 4; j > 0; j--) {
                    punkte++;
                }
            }

        }
        return punkte;
    }*/


    public static int calculatePenalty2x2(boolean[][] arr) {
        int punkte = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1; j++) {
                if (arr[i][j] == arr[i + 1][j] && arr[i][j] == arr[i][j + 1] &&
                        arr[i][j] == arr[i + 1][j + 1]) {
                    punkte += 3;
                }

            }
        }

        return punkte;
    }

    public static int calculatePenaltyBlackWhite(boolean[][] arr) {
        throw new IllegalStateException();
    }

    public static int calculatePenaltyPattern(boolean[][] array) {
        throw new IllegalStateException();
    }

    public static int calculatePenaltyFor(boolean[][] data) {
        int summe = calculatePenaltySameColored(data) + calculatePenalty2x2(data) +
                calculatePenaltyBlackWhite(data) + calculatePenaltyPattern(data);
        return summe;
    }

    public static MaskPattern maskWithBestMask(boolean[][] data, ErrorCorrection correction, ReservedModulesMask modulesMask) {
        throw new IllegalStateException();
    }
}
