package jpp.qrcode.decode;

import jpp.qrcode.DataBlock;
import jpp.qrcode.ErrorCorrection;
import jpp.qrcode.ErrorCorrectionGroup;
import jpp.qrcode.ErrorCorrectionInformation;
import jpp.qrcode.reedsolomon.ReedSolomon;
import jpp.qrcode.reedsolomon.ReedSolomonException;

public class DataDestructurer {
    public static byte[] join(DataBlock[] blocks, ErrorCorrectionInformation errorCorrectionInformation) {


        int blockAnz = errorCorrectionInformation.totalBlockCount();
        int korrB = errorCorrectionInformation.correctionBytesPerBlock();
        int korrGes = blockAnz * korrB;
        byte[] data = new byte[errorCorrectionInformation.totalDataByteCount()];
        byte[] korrBytes = new byte[korrGes];

        int pos = 0;
        for (DataBlock bl : blocks) {
            byte[] da = bl.dataBytes();
            for (int i = 0; i < da.length; i++) {
                data[pos] = da[i];
                pos++;
            }
        }
        pos = 0;
        for (DataBlock bl : blocks) {
            byte[] corr = bl.correctionBytes();
            for (int i = 0; i < corr.length; i++) {
                korrBytes[pos] = corr[i];
                pos++;
            }
        }

		/*try {
			ReedSolomon.correct(data,korrBytes);
		} catch (ReedSolomonException e) {
			throw new QRDecodeException();
		}*/

        return data;
    }

    public static DataBlock[] deinterleave(byte[] data, ErrorCorrectionInformation errorCorrectionInformation) {
        int block = errorCorrectionInformation.totalBlockCount();
        int korr = errorCorrectionInformation.correctionBytesPerBlock();
        int langKorr = block * korr;
        ErrorCorrectionGroup[] group = errorCorrectionInformation.correctionGroups();
        //int low = errorCorrectionInformation.lowerDataByteCount();

        DataBlock[] result = new DataBlock[block];

        int blockGr1 = group[0].blockCount();
        int blockGr2 = 0;
        if (group.length == 2) {
            blockGr2 = group[1].blockCount();
        }

        int blZahl = 1;
        int i = 0;
        for (int j = 0; j < errorCorrectionInformation.totalBlockCount(); j++) {
            int pos = 0;
            byte[] dataBlock = null;
            byte[] dataBlockGr = null;
            if (blZahl <= blockGr1) {
                dataBlock = new byte[blockGr1];
                for (int a = 0; a < dataBlock.length; a++) {
                    dataBlock[a] = data[pos + j];
                    pos += block;
                }
            } else {
                dataBlockGr = new byte[blockGr2];
                for (int c = 0; c < dataBlockGr.length; c++) {
                    dataBlockGr[c] = data[pos + j];
                    pos += block;
                }
            }
            int posKorr = data.length - langKorr;
            byte[] korrBytes = new byte[korr];
            for (int b = 0; b < korrBytes.length; b++) {
                korrBytes[b] = data[posKorr + j];
                posKorr += block;
            }
            DataBlock bl;
            if (dataBlock==null){
                bl = new DataBlock(dataBlockGr, korrBytes);

            }else bl = new DataBlock(dataBlock, korrBytes);
            result[i] = bl;
            i++;
            blZahl++;
        }
        return result;
}

    public static byte[] destructure(byte[] data, ErrorCorrectionInformation ecBlocks) throws ReedSolomonException {
        if (data.length!=ecBlocks.totalDataByteCount()){
            throw new IllegalArgumentException();
        }
        return join(deinterleave(data,ecBlocks),ecBlocks);
    }
}


