package jpp.qrcode.encode;

import jpp.qrcode.*;

public class MaskSelector {

    public static void placeFormatInformation(boolean[][] res, int formatInformation) {
        FormatInformation form = FormatInformation.fromBits(formatInformation);
        form.toString();
        ErrorCorrection error = form.errorCorrection();
        MaskPattern mask = form.maskPattern();
        MaskFunction fkt = mask.maskFunction();


        throw new IllegalStateException();
    }

    public static int calculatePenaltySameColored(boolean[][] data) {
        int punkte=0;
        for (int a = 0; a < data.length; a++) {
            int j = 0;
            while (j < data.length) {
                int counter = 0;
                if (j==data.length-1){
                    break;
                }
                while (data[a][j] == data[a][j + 1]) {
                    counter++;
                    j++;
                    if (j == data.length - 1) {
                        break;
                    }
                }
                j++;
                counter += 1;
                if (counter > 4) {
                    if (counter - 5 == 0) {
                        punkte += 3;
                    } else {
                        punkte += 3;
                        for (a = counter - 5; a > 0; a--) {
                            punkte++;
                        }
                    }

                }
            }
            int i = 0;
            while (i < data.length) {
                int counter = 0;
                if (j==data.length-1){
                    break;
                }
                while (data[a][i] == data[a][i + 1]) {
                    counter++;
                    i++;
                    if (i == data.length - 1) {
                        break;
                    }
                }
                i++;
                counter += 1;
                if (counter > 4) {
                    if (counter - 5 == 0) {
                        punkte += 3;
                    } else {
                        punkte += 3;
                        for (a = counter - 5; a > 0; a--) {
                            punkte++;
                        }
                    }

                }
            }
        }

        return punkte;
    }

    public static int calculatePenalty2x2(boolean[][] arr) {
        throw new IllegalStateException();
    }

    public static int calculatePenaltyBlackWhite(boolean[][] arr) {
        throw new IllegalStateException();
    }

    public static int calculatePenaltyPattern(boolean[][] array) {
        throw new IllegalStateException();
    }

    public static int calculatePenaltyFor(boolean[][] data) {
        throw new IllegalStateException();
    }

    public static MaskPattern maskWithBestMask(boolean[][] data, ErrorCorrection correction, ReservedModulesMask modulesMask) {
        throw new IllegalStateException();
    }
}
