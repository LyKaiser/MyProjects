package jpp.qrcode;

public class DataPositions {

    private ReservedModulesMask mask;
    private int i;
    private int j;


    public DataPositions(ReservedModulesMask mask) {
        this.mask = mask;
        i = mask.size() - 1;
        j = mask.size() - 1;


    }

    public int i() {
        return i;


    }

    public int j() {
        return j;


    }

    public boolean next() {
        int iNext;
        int jNext;

        if (i == mask.size() - 1 && j == 9) {
            iNext = mask.size() - 9;
            jNext = 8;
        } else if (i == 9 && j == 7) {
            iNext = i;
            jNext = j + 2;
        } else if (j > 6) {
            if (j % 2 == 0) {
                iNext = i;
                jNext = j - 1;
            } else if ((j + 1) % 4 == 0) {
                if (i == 9 && j > mask.size() - 9) {
                    iNext = i;
                    jNext = j - 1;
                } else if (i == 7) {
                    iNext = i - 2;
                    jNext = j + 1;
                } else {
                    iNext = i - 1;
                    jNext = j + 1;
                }
            } else {
                if (i == mask.size() - 1 && j > 9) {
                    iNext = i;
                    jNext = j - 1;
                } else if (i == 5) {
                    iNext = i + 2;
                    jNext = j + 1;
                } else {
                    iNext = i + 1;
                    jNext = j + 1;
                }
            }
        } else {
            if ((j + 1) % 2 == 0) {
                iNext = i;
                jNext = j - 1;
            } else if (j == 4 || j == 0) {
                if (i == mask.size() - 9) {
                    iNext = i;
                    jNext = j - 1;
                } else {
                    iNext = i - 1;
                    jNext = i + 1;
                }
            } else {
                if (i == 9) {
                    iNext = i;
                    jNext = j - 1;
                } else {
                    iNext = i + 1;
                    jNext = i + 1;
                }
            }
        }

        while (mask.isReserved(iNext, jNext)) {
            if (j % 2 == 0) {
                iNext = j - 1;
                jNext = i - 1;
            } else {
                iNext = +1;
                jNext = +1;
            }
        }
        i = iNext;
        j = jNext;
        if (jNext == 0 && mask.isReserved(iNext - 1, jNext)) {
            return false;
        } else if (jNext == 0 && iNext == mask.size() - 9) {
            return false;
        } else {

            return true;
        }

    }


    public static void main(String[] args) {

        DataPositions data = new DataPositions(ReservedModulesMask.forVersion(Version.fromNumber(2)));
        while (data.next()) {
            System.out.println(data.i() + ", " + data.j());

        }

    }

}





        /*if(i >)

            if(matrix[i][j])

    {
        int iNext = i();
        int jNext = j();

        if (iNext == 6 || jNext == 6) {
            iNext = i();
            jNext = j();
        }
        while (mask.isReserved(iNext, jNext)) {
            iNext = i();
            jNext = j();
        }
        i = iNext;
        j = jNext;
    }
        if(j >-1)

    {
        matrix[i][j] = true;
        return true;
    } else return false;
}
}*/

