package jpp.qrcode.decode;

import jpp.qrcode.Encoding;
import jpp.qrcode.ErrorCorrection;
import jpp.qrcode.QRCodeException;
import jpp.qrcode.Version;

public class DataDecoder {


    public static Encoding readEncoding(byte[] bytes) {
        int in = 0;
        int pos = 3;
        for (int i = 7; i > 3; i--) {
            if ((bytes[0] & (1 << i)) != 0) {
                in |= (1 << pos);
            }
            pos--;
        }
        return Encoding.fromBits(in);
    }

    public static int readCharacterCount(byte[] bytes, int count) {
        int in = 0;
        int pos = 7;

        if (count == 8) {
            for (int i = 3; i >= 0; i--) {
                if ((bytes[0] & (1 << i)) != 0) {
                    in |= (1 << pos);
                    pos--;
                } else pos--;
            }
            for (int i = 7; i > 3; i--) {
                if ((bytes[1] & (1 << i)) != 0) {
                    in |= (1 << pos);
                }
                pos--;
            }
        } else {
            pos = 15;
            for (int i = 3; i >= 0; i--) {
                if ((bytes[0] & (1 << i)) != 0) {
                    in |= (1 << pos);
                }
                pos--;
            }
            for (int i = 7; i >= 0; i--) {
                if ((bytes[1] & (1 << i)) != 0) {
                    in |= (1 << pos);
                }
                pos--;
            }
            for (int i = 7; i >3; i--) {
                if ((bytes[2] & (1 << i)) != 0) {
                    in |= (1 << pos);
                }
                pos--;
            }
        }

        return in;
    }

    public static String decodeToString(byte[] bytes, Version version, ErrorCorrection errorCorrection) {
        if (version.correctionInformationFor(errorCorrection).totalDataByteCount()!=bytes.length){
            throw new IllegalArgumentException();
        }
        if (!readEncoding(bytes).equals(Encoding.BYTE)){
            throw new QRCodeException();
        }
        int cci=8;
        if (version.number()>9){
            cci=16;
        }
        if ((cci==8&&readCharacterCount(bytes,8)>256)||(cci==16&&readCharacterCount(bytes,16)>65536)){
            throw new QRCodeException();
        }
        String s;
        int strLang=readCharacterCount(bytes,cci);



        return null;
    }

    public static void main(String[] args) {
        byte[] by = {0b00010000};

        System.out.println(readEncoding(by));
    }
}
