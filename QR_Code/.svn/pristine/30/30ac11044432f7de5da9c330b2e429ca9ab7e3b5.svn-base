package jpp.qrcode.decode;

import jpp.qrcode.DataBlock;
import jpp.qrcode.ErrorCorrection;
import jpp.qrcode.ErrorCorrectionGroup;
import jpp.qrcode.ErrorCorrectionInformation;
import jpp.qrcode.reedsolomon.ReedSolomon;
import jpp.qrcode.reedsolomon.ReedSolomonException;

public class DataDestructurer {
    public static byte[] join(DataBlock[] blocks, ErrorCorrectionInformation errorCorrectionInformation) {


        int blockAnz = errorCorrectionInformation.totalBlockCount();
        int korrB = errorCorrectionInformation.correctionBytesPerBlock();
        int korrGes = blockAnz * korrB;
        byte[] data = new byte[errorCorrectionInformation.totalDataByteCount()];
        byte[] korrBytes = new byte[korrGes];

        int pos = 0;
        for (DataBlock bl : blocks) {
            byte[] da = bl.dataBytes();
            for (int i = 0; i < da.length; i++) {
                data[pos] = da[i];
                pos++;
            }
        }
        pos = 0;
        for (DataBlock bl : blocks) {
            byte[] corr = bl.correctionBytes();
            for (int i = 0; i < corr.length; i++) {
                korrBytes[pos] = corr[i];
                pos++;
            }
        }

		/*try {
			ReedSolomon.correct(data,korrBytes);
		} catch (ReedSolomonException e) {
			throw new QRDecodeException();
		}*/

        return data;
    }

    public static DataBlock[] deinterleave(byte[] data, ErrorCorrectionInformation errorCorrectionInformation) {
        int block = errorCorrectionInformation.totalBlockCount();
        int korr = errorCorrectionInformation.correctionBytesPerBlock();
        int langKorr = block * korr;
        ErrorCorrectionGroup[] group = errorCorrectionInformation.correctionGroups();

        DataBlock[] result = new DataBlock[block];

        int stelle = 0;
        int pos = 0;
        int korrPos = data.length-langKorr;
        for (ErrorCorrectionGroup g : group) {
            int bloecke = g.blockCount();
            int dataL = g.dataByteCount();
            while (bloecke > 0) {
                byte[] by = new byte[dataL];
                for (int i = 0; i <by.length; i++) {
                    by[i] = data[pos];
                    pos++;
                }
                byte[] bykorr=new byte[korr];
                for (int j=0; j<bykorr.length;j++){
                    bykorr[j]=data[korrPos];
                    korrPos++;
                }
                DataBlock db = new DataBlock(by,bykorr);
                result[stelle]=db;
                stelle++;
                bloecke--;
            }
        }

        return result;
    }

    public static byte[] destructure(byte[] data, ErrorCorrectionInformation ecBlocks) throws ReedSolomonException {
        throw new IllegalStateException();
    }
}
