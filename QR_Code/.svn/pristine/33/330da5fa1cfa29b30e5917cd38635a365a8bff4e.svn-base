package jpp.qrcode.encode;

import jpp.qrcode.*;

import java.util.ArrayList;
import java.util.List;

import static java.lang.Math.abs;

public class MaskSelector {

    public static void placeFormatInformation(boolean[][] res, int formatInformation) {

        String s = Integer.toBinaryString(formatInformation);
        int pos = s.length() - 1;
        for (int i = 0; i < 9; i++) {
            if (i != 6) {
                if (pos >= 0) {
                    if (s.charAt(pos) == '1') {
                        res[i][8] = true;
                    }
                    pos--;
                }
            }
        }
        for (int i = 7; i >= 0; i--) {
            if (i != 6) {
                if (pos >= 0) {
                    if (s.charAt(pos) == '1') {
                        res[8][i] = true;
                    }
                    pos--;
                }
            }
        }
        pos = s.length() - 1;
        for (int i = res.length - 1; i > res.length - 9; i--) {
            if (pos >= 0) {
                if (s.charAt(pos) == '1') {
                    res[8][i] = true;
                }
                pos--;
            }
        }
        for (int i = res.length - 7; i < res.length; i++) {
            if (pos >= 0) {
                if (s.charAt(pos) == '1') {
                    res[i][8] = true;
                }
                pos--;
            }
        }
    }

    public static int calculatePenaltySameColored(boolean[][] data) {
        int counter = 1;
        int punkte = 0;
        for (int i = 0; i < data.length; i++) {
            counter=1;
            for (int j = 0; j < data.length - 1; j++) {
                if (data[i][j] == data[i][j + 1]) {
                    counter++;
                    if (counter == 5) {
                        punkte += 3;
                    } else if (counter > 5) {
                        punkte++;
                    }
                } else counter = 1;

            }
        }
        counter=1;
        for (int i = 0; i < data.length; i++) {
            counter=1;
            for (int j = 0; j < data.length - 1; j++) {
                if (data[j][i] == data[j + 1][i]) {
                    counter++;
                    if (counter == 5) {
                        punkte += 3;
                    } else if (counter > 5) {
                        punkte++;
                    }
                } else counter = 1;

            }
        }
        return punkte;
    }


    public static int calculatePenalty2x2(boolean[][] arr) {
        int punkte = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1; j++) {
                if (arr[i][j] == arr[i + 1][j] && arr[i][j] == arr[i][j + 1] &&
                        arr[i][j] == arr[i + 1][j + 1]) {
                    punkte += 3;
                }

            }
        }

        return punkte;
    }

    public static int calculatePenaltyBlackWhite(boolean[][] arr) {
        int black=0;
        for (int i=0;i<arr.length;i++){
            for (int j = 0; j<arr.length;j++){
                if (arr[i][j]){
                    black++;
                }
            }
        }
        int bla = 10*(abs(2*black-(arr.length*arr.length))*10/(arr.length*arr.length));
        return bla;
    }

    public static int calculatePenaltyPattern(boolean[][] array) {
      return 0;
    }

    public static int calculatePenaltyFor(boolean[][] data) {
        int summe = calculatePenaltySameColored(data) + calculatePenalty2x2(data) +
                calculatePenaltyBlackWhite(data) + calculatePenaltyPattern(data);
        return summe;
    }

    public static MaskPattern maskWithBestMask(boolean[][] data, ErrorCorrection correction, ReservedModulesMask modulesMask) {
        throw new IllegalStateException();
    }
}
