package jpp.qrcode.decode;

import jpp.qrcode.DataBlock;
import jpp.qrcode.ErrorCorrectionGroup;
import jpp.qrcode.ErrorCorrectionInformation;
import jpp.qrcode.reedsolomon.ReedSolomon;
import jpp.qrcode.reedsolomon.ReedSolomonException;

public class DataDestructurer {
	public static byte[] join(DataBlock[] blocks, ErrorCorrectionInformation errorCorrectionInformation) {


		int blockAnz= errorCorrectionInformation.totalBlockCount();
		int korrB = errorCorrectionInformation.correctionBytesPerBlock();
		int korrGes = blockAnz*korrB;
		byte [] data= new byte[errorCorrectionInformation.totalDataByteCount()];
		byte [] korrBytes =new byte[korrGes];

		int pos=0;
		for (DataBlock bl : blocks){
			byte[] da = bl.dataBytes();
			for (int i=0; i<da.length;i++){
				data[pos]=da[i];
				pos++;
			}
		}
		pos=0;
		for (DataBlock bl : blocks){
			byte [] corr = bl.correctionBytes();
			for (int i=0; i<corr.length;i++){
				korrBytes[pos]=corr[i];
				pos++;
			}
		}

		/*try {
			ReedSolomon.correct(data,korrBytes);
		} catch (ReedSolomonException e) {
			throw new QRDecodeException();
		}*/

		return data;
	}
	
	public static DataBlock[] deinterleave(byte[] data, ErrorCorrectionInformation errorCorrectionInformation) {
		throw new IllegalStateException();
	}
	
	public static byte[] destructure(byte[] data, ErrorCorrectionInformation ecBlocks) throws ReedSolomonException {
		throw new IllegalStateException();
	}
}
