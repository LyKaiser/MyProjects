package jpp.qrcode;

public class DataPositions {

    private ReservedModulesMask mask;
    private int i;
    private int j;


    public DataPositions(ReservedModulesMask mask) {
        this.mask = mask;
        i = mask.size() - 1;
        j = mask.size() - 1;
    }

    public int i() {
        return i;
    }

    public int j() {
        return j;
    }

    public boolean next() {
        int iNext;
        int jNext;

        if (i == mask.size() - 1 && j == 9) {
            iNext = mask.size() - 9;
            jNext = 8;
        } else if (i == 9 && j == 7) {
            iNext = i;
            jNext = j + 2;
        } else if (j > 6) {
            if (j % 2 == 0) {
                iNext = i;
                jNext = j - 1;
            } else if ((j + 1) % 4 == 0) {
                if (i == 9 && j > mask.size() - 9) {
                    iNext = i;
                    jNext = j - 1;
                } else if (i == 7) {
                    iNext = i - 2;
                    jNext = j + 1;
                } else {
                    iNext = i - 1;
                    jNext = j + 1;
                }
            } else {
                if (i == mask.size() - 1 && j > 9) {
                    iNext = i;
                    jNext = j - 1;
                } else if (i == 5) {
                    iNext = i + 2;
                    jNext = j + 1;
                } else {
                    iNext = i + 1;
                    jNext = j + 1;
                }
            }
        } else {
            if ((j + 1) % 2 == 0) {
                iNext = i;
                jNext = j - 1;
            } else if (j == 4 || j == 0) {
                if (i == mask.size() - 9) {
                    iNext = i;
                    jNext = j - 1;
                } else {
                    iNext = i - 1;
                    jNext = j + 1;
                }
            } else {
                if (i == 9) {
                    iNext = i;
                    jNext = j - 1;
                } else {
                    iNext = i + 1;
                    jNext = j + 1;
                }
            }
        }

        if (jNext == 0 && mask.isReserved(iNext - 1, jNext)) {
            return false;
        } else if (jNext == 0 && iNext == mask.size() - 9) {
            return false;
        }

        while (mask.isReserved(iNext, jNext)) {
            if (jNext > 6) {
                if (jNext % 2 == 0) {
                    jNext = jNext - 1;
                } else if ((jNext + 1) % 4 == 0) {
                    if (iNext == 9 && jNext > mask.size() - 9) {
                        jNext = jNext - 1;
                    } else if (iNext == 7) {
                        iNext = iNext - 2;
                        jNext = jNext + 1;
                    } else {
                        iNext = iNext - 1;
                        jNext = jNext + 1;
                    }
                } else {
                    if (iNext == mask.size() - 1 && jNext > 9) {
                        jNext = jNext - 1;
                    } else if (iNext == 5) {
                        iNext = iNext + 2;
                        jNext = jNext + 1;
                    } else {
                        iNext = iNext + 1;
                        jNext = jNext + 1;
                    }
                }
            } else {
                if ((jNext + 1) % 2 == 0) {
                    jNext = jNext - 1;
                } else if (jNext == 4 || jNext == 0) {
                    if (iNext == mask.size() - 9) {
                        jNext = jNext - 1;
                    } else {
                        iNext = iNext - 1;
                        jNext = jNext + 1;
                    }
                } else {
                    if (iNext == 9) {
                        jNext = jNext - 1;
                    } else {
                        iNext = iNext + 1;
                        jNext = jNext + 1;
                    }
                }
            }
        }

        i = iNext;
        j = jNext;

        return true;
    }


    /*public static void main(String[] args) {

        DataPositions data = new DataPositions(ReservedModulesMask.forVersion(Version.fromNumber(2)));
        while (data.next()) {
            System.out.println(data.i() + ", " + data.j());

        }

    }*/

}