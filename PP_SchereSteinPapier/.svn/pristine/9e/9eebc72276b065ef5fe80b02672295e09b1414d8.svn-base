package jpp.gametheory.generic;

import java.util.*;

public class Game<C extends IChoice> {

    private final Set<IPlayer<C>> players;
    private final IReward<C> reward;
    private List<IGameRound<C>> rounds= new ArrayList<>();

    public Game(Set<IPlayer<C>> players, IReward<C> reward) throws IllegalArgumentException, NullPointerException{
        if (players==null||reward==null){
            throw new NullPointerException();
        }
        if (players.size() <= 1) {
            IllegalException e = new IllegalException();
            e.error = "Zu wenig Spieler - min. zwei Spieler!";
            throw e;
        }
        this.players = players;
        this.reward = reward;
    }


    public Set<IPlayer<C>>getPlayers(){
     return players;
    }

    public IGameRound<C>playRound(){

        Map<IPlayer<C>,C> playR = new HashMap<>();
        for (IPlayer<C> player : players){
            playR.put(player,player.getChoice(getPlayedRounds()));
        }
        IGameRound<C> round = new GameRound<>(playR);
        rounds.add(round);
        return round;
    }

    public void playNRounds(int n) throws IllegalArgumentException{
        if (n<1){
            throw new IllegalArgumentException();
        }
        for (int i=1; i<n; i++){
            playRound();
        }

    }

    public Optional<IGameRound<C>> undoRound(){
        rounds.remove(rounds.size()-1);

        return Optional.ofNullable(rounds.get(rounds.size() - 1));
    }

    public void undoNRounds(int n) throws IllegalArgumentException{
        if (n<1){
            throw new IllegalArgumentException();
        }
        for (int i=1; i<n; i++){
            undoRound();
        }

    }

    public List<IGameRound<C>> getPlayedRounds(){
        return rounds;
    }

    public int getPlayerProfit(IPlayer<C> player){
        return 0;
    }

    public Optional<IPlayer<C>> getBestPlayer(){
        return null;
    }





}
