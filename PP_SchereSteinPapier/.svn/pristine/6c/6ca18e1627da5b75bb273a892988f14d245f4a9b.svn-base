package jpp.gametheory.generic;

import java.util.*;

public class Game<C extends IChoice> {

    private final Set<IPlayer<C>> players;
    private final IReward<C> reward;

    public Game(Set<IPlayer<C>> players, IReward<C> reward) {
        if (players.size() <= 1) {
            NullPointException e = new NullPointException();
            e.error = "Zu wenig Spieler - min. zwei Spieler!";
            throw e;
        }
        this.players = players;
        this.reward = reward;
    }

    public Set<IPlayer<C>>getPlayers(){
     return players;
    }

    public IGameRound<C>playRound(){
        /*for (IPlayer<C> player : players){
            player.getStrategy();
            player.getName();
            player.getStrategy().getChoice(player,null);
        }
        GameRound<C> playR = new GameRound<C>(players,alle);
        */return null;
    }

    public void playNRounds(int n){

    }

    public Optional<IGameRound<C>> undoRound(){
        return null;
    }

    public void undoNRounds(int n){

    }

    public List<IGameRound<C>> getPlayedRounds(){
        return null;
    }

    public int getPlayerProfit(IPlayer<C> player){
        return 0;
    }

    public Optional<IPlayer<C>> getBestPlayer(){
        return null;
    }





}
