package sudoku;

import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

public class Constraint {

  private final Set<String> variableNames = new HashSet<>();

  public Constraint(Set<String> variableNames) {
    this.variableNames.addAll(variableNames);
  }

  public Set<String> variables() {
    return new HashSet<>(variableNames);
  }

  @Override
  public String toString() {
    return "AllDiff(" + variableNames.stream().sorted().collect(Collectors.joining(", ")) + ")";
  }

  @Override
  public boolean equals(Object other) {
    return (other instanceof Constraint) && variableNames.equals(((Constraint) other).variableNames);
  }

  @Override
  public int hashCode() {
    return variableNames.hashCode();
  }

  public static Set<Constraint> getConstraints() {
    return null;
  }

  public static Set<Constraint> getSquareConstraints() {
    return null;
  }

  public static Set<Constraint> getColumnConstraints() {
    return null;
  }

  public static Set<Constraint> getRowConstraints() {
    return null;
  }

}
