package de.jpp.algorithm;

import de.jpp.algorithm.interfaces.*;
import de.jpp.factory.SearchStopFactory;
import de.jpp.model.TwoDimGraph;
import de.jpp.model.XYNode;
import de.jpp.model.interfaces.Edge;
import de.jpp.model.interfaces.Graph;

import java.util.*;

public class DepthFirstSearch<N, A, G extends Graph<N, A>> implements SearchAlgorithm<N, A, G> {
    private boolean stopped;
    private G graph;
    private N start;
    private SearchResultImpl<N,A> result;

    public DepthFirstSearch(G graph, N start) {
        this.graph = graph;
        this.start = start;
    }

    @Override
    public SearchResult<N, A> findPaths(SearchStopStrategy<N> type) {

        Collection<N> nodes= graph.getNodes();
        Collection<Edge<N,A>> edges = graph.getEdges();

        graph.getReachableFrom(start);

        LinkedList<N> list=new LinkedList<>();
        while (!type.stopSearch(start)){
            list.add(start);
            /*for (Edge<N,A> edge :edges){
                if (edge.getStart().equals(start)){
                    list.addFirst(edge.getDestination());
                }
            }*/
            Collection<Edge<N,A>> neighbours= graph.getNeighbours(start);
            for (Edge<N,A> n: neighbours){
                list.addFirst(n.getDestination());
            }
            result.setClosed(start);
            list.remove(start);
            start=list.getLast();

        }
        return result;
    }

    @Override
    public SearchResult<N, A> findAllPaths() {
        return findPaths(new SearchStopFactory().expandAllNodes());
    }

    @Override
    public ObservableSearchResult<N, A> getSearchResult() {
        return null;
    }

    @Override
    public N getStart() {
        return null;
    }

    @Override
    public G getGraph() {
        return null;
    }

    @Override
    public void stop() {

    }
}
