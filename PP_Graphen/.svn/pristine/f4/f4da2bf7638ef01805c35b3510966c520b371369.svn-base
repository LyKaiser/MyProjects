package de.jpp.algorithm;

import de.jpp.algorithm.interfaces.*;
import de.jpp.model.interfaces.Edge;
import de.jpp.model.interfaces.Graph;
import org.w3c.dom.Node;

import java.lang.reflect.Array;
import java.util.*;


public abstract class BreadthFirstSearchTemplate<N, A, G extends Graph<N, A>> implements SearchAlgorithm<N, A, G> {
    private boolean stopped = false;
    private G graph;
    private N start;
    private SearchResultImpl<N, A> result = new SearchResultImpl<>();
    private LinkedList<N> que = new LinkedList<>();
    private double dist = 0;
    double vergl = Double.MAX_VALUE;

    public BreadthFirstSearchTemplate(G graph, N start) {
        this.graph = graph;
        this.start = start;
    }

    @Override
    public SearchResult<N, A> findPaths(SearchStopStrategy<N> type) {

        Collection<N> nodes = graph.getNodes();
        for (N node : nodes) {
            result.statusMap.put(node, NodeStatus.UNKOWN);
        }
        result.setOpen(start);
        que.add(start);
        while (!que.isEmpty()) {
            if (!stopped) {
                N n = que.getFirst();
                que.remove(n);
                for (Edge<N, A> edge : graph.getNeighbours(n)) {
                    if (result.getNodeStatus(edge.getDestination()).equals(NodeStatus.OPEN)) {
                        result.setOpen(edge.getDestination());
                        NodeInformation<N, A> info = new NodeInformation<>(edge, vergl + 1);
                        vergl += 1;
                        result.infoMap.put(edge.getDestination(), info);
                        que.add(edge.getDestination());
                        if (type.stopSearch(edge.getDestination())){
                            stop();
                        }
                    }
                }
                result.setClosed(n);
                if (type.stopSearch(n)){
                    stop();
                }
            }
        }




        /*result.setOpen(start);
        que.add(start);
        while (!que.isEmpty()){
            N node= que.getFirst();
            for (Edge<N,A> edge : graph.getNeighbours(node)){
                relax(edge,type);
            }
            dist+=vergl;
            vergl=Double.MAX_VALUE;
            que.remove(node);
            result.setClosed(node);
        }*/
        return result;
    }

    /*public void relax(Edge<N,A> edge, SearchStopStrategy<N> type) {
        result.setOpen(edge.getDestination());
        double anno;
        if (edge.getAnnotation().isPresent()){
            anno=(double)edge.getAnnotation().get();
        }else anno=1.0;

        NodeInformation<N,A> info=new NodeInformation<>(edge,anno);
        result.infoMap.put(edge.getDestination(),info);

        if (anno+dist<vergl){
            que.addFirst(edge.getDestination());
            vergl=anno+dist;
        }else que.addLast(edge.getDestination());

    }*/

    @Override
    public SearchResult<N, A> findAllPaths() {
        return result;
    }

    @Override
    public ObservableSearchResult<N, A> getSearchResult() {
        return result;
    }

    @Override
    public N getStart() {
        return start;
    }

    @Override
    public G getGraph() {
        return graph;
    }

    @Override
    public void stop() {
        stopped = true;

    }

    public abstract NodeInformation<N, A> getNodeInformation(Edge<N, A> edge, A anno);

    public abstract void openIfShorter(N node, NodeInformation<N, A> info);
}
