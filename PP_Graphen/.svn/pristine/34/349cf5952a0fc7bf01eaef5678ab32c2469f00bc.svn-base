package de.jpp.maze;

import de.jpp.io.interfaces.ParseException;

import java.awt.image.BufferedImage;
import java.util.Random;

public class MazeImpl implements Maze {

    private int width;
    private int height;
    private boolean[][] cells;
    private boolean[][] hWall;
    private boolean[][] vWall;

    public MazeImpl(int width, int height) {
        this.width = width;
        this.height = height;
        cells = new boolean[width][height];
        hWall = new boolean[width - 1][height];
        vWall = new boolean[width][height - 1];

    }

    @Override
    public void setHWall(int x, int y, boolean wallActive) {
        hWall[x][y] = wallActive;
    }

    @Override
    public void setVWall(int x, int y, boolean wallActive) {
        vWall[x][y] = wallActive;
    }

    @Override
    public void setAllWalls(boolean wallActive) {
        for (int i = 0; i < hWall.length; i++) {
            for (int j = 0; j < hWall[i].length; j++) {
                hWall[i][j] = wallActive;
            }
        }
        for (int i = 0; i < vWall.length; i++) {
            for (int j = 0; j < vWall[i].length; j++) {
                vWall[i][j] = wallActive;
            }
        }
    }

    @Override
    public int getWidth() {
        return width;
    }

    @Override
    public int getHeight() {
        return height;
    }

    public boolean[][] getCells() {
        return cells;
    }

    public boolean[][] gethWall() {
        return hWall;
    }

    public boolean[][] getvWall() {
        return vWall;
    }

    @Override
    public boolean isHWallActive(int x, int y) {
        if (x<=hWall.length&&y<=hWall[x].length){
            return hWall[x][y];
        }else return true;

    }

    @Override
    public boolean isVWallActive(int x, int y) {
        if (x<=vWall.length&&y<=vWall[x].length){
            return vWall[x][y];
        }else return true;

    }

}