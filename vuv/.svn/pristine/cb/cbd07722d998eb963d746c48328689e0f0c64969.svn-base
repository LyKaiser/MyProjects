package vuv;

import java.util.*;
import java.util.stream.Collectors;

public class Main {

    public static void main(String[] args) throws Exception {

        final StartData sd = Import.importStream(Main.class.getResourceAsStream("field.csv"));
        System.out.println(sd.courses);
        System.out.println(sd.students);

        List<Student> students = new ArrayList<>();
        List<Course> courses = new ArrayList<>();
        courses.add(new Course("c1", 1));
        courses.add(new Course("c2", 2));
        courses.add(new Course("c3", 3));
        courses.add(new Course("c4", 4));
        courses.add(new Course("c5", 5));

        List<Course> coursesS1 = new ArrayList<>();
        List<Course> coursesS2 = new ArrayList<>();
        List<Course> coursesS3 = new ArrayList<>();

        System.out.println(sortStudents(sd));

        /*final Map<Student, Course> assignments = solve(sd);
    //final Map<Student, Course> assignments = solveAdvanced(sd);
        System.out.print("    ");
        for (final Course c : sd.courses) {
            System.out.print(String.format("%5s", c.name));
        }
        System.out.println();

        for (final Student s : sd.students) {
            System.out.print(String.format("%4s", s.name));
            for (final Course c : sd.courses) {
                if (assignments.get(s).equals(c)) {
                    System.out.print("    x");
                } else {
                    System.out.print("     ");
                }
            }
            System.out.println();
        }*/
    }

    // Part 1:

    public static List<Student> sortStudents(StartData d) {
        List<Student> students = d.students;
        List<Course> courses = d.courses;

        courses.sort(Comparator.comparing(Course::getCapacity));


        List<Student> result = new ArrayList<>();
        for (Course c : courses) {
            for (Student s : students) {
                if (s.courses.get(0).equals(c)) {
                    result.add(s);
                }
            }
        }
        return result;
    }

    public static Course getBestCourse(StartData d, Map<Student, Course> assignments, Student s) {
        List<Course> studentCourses = s.courses;
        for (int i = 0; i < studentCourses.size(); i++) {
            int counter = 0;
            for (Course course : d.courses) {
                if (studentCourses.get(i).equals(course)) {
                    int capacity = course.capacity;
                    for (Course cou : assignments.values()) {
                        if (cou.equals(course)) {
                            counter++;
                        }
                    }
                    if (counter < capacity) {
                        return course;
                    }
                }
            }
        }
        for (Course c : d.courses) {
            int counter = 0;
            int capacity = c.capacity;
            for (Course cou : assignments.values()) {
                if (cou.equals(c)) {
                    counter++;
                }
            }
            if (counter < capacity) {
                return c;
            }
        }
        return null;
    }

    public static Student getWorstAssignedStudent(Map<Student, Course> assignments) {
        return null;
    }

    public static List<Swap> getAllSwaps(Student s, Map<Student, Course> assignments) {
        return null;
    }

    public static double getScore(Swap swap) {
        return 0;
    }

    public static Swap getBestSwap(List<Swap> swaps) {
        return null;
    }

    public static Map<Student, Course> solve(StartData d) {
        return null;
    }

    // Part 2:

    public static <T> List<List<T>> perms(Set<T> pool, int depthRemaining) {
        return null;
    }

    public static List<Swaps> getAllSwaps(int depth, Map<Student, Course> assignments) {
        return null;
    }

    public static double getScore(Swaps swaps) {
        return 0;
    }

    public static Student getMostUrgentStudent(Set<Student> students, Map<Student, Course> assignments) {
        return null;
    }

    public static Map<Student, Course> solveAdvanced(StartData d) {
        return null;
    }

}