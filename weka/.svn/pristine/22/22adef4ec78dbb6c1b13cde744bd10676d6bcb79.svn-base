package weka;

import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;

import java.io.InputStream;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class Main {

  public static void main(String[] args) throws Exception {
    Random random = new Random(1);

    Instances data = getFullDataSet();

    Instance instanceToClassify = data.remove(data.numInstances() - 1);
    instanceToClassify.setClassMissing();

    System.out.println(classifyWithNaiveBayes(data, instanceToClassify));
    System.out.println(getNaiveBayesCorrectPercentage(getFullDataSet(), random));

    System.out.println(classifyWithRules(data, instanceToClassify));
    System.out.println(getNumOfRules(getFullDataSet()));

    System.out.println(classifyWithDecisionTree(data, instanceToClassify));
    for (Instance anIncorrectlyClassifiedInstance : getDecisionTreeIncorrectlyClassifiedInstances(getFullDataSet(),
            random))
      System.out.println(anIncorrectlyClassifiedInstance);

    System.out.println(classifyWithCaseBasedReasoning(data, instanceToClassify));
    System.out.println(getCBRNumSingleValueCorrectlyClassified(getFullDataSet(), "Walnuss", random));
  }

  private static Instances getFullDataSet() throws Exception {
    InputStream arffFile = Main.class.getResourceAsStream("baeume.arff");
    DataSource dataSource = new DataSource(arffFile);
    Instances data = dataSource.getDataSet();
    setClassIndex(data, "Baumgattung");
    return data;
  }

  public static void setClassIndex(Instances data, String attributeName) {

  }

  public static String classifyWithNaiveBayes(Instances data, Instance instanceToClassify) throws Exception {
    return null;
  }

  public static double getNaiveBayesCorrectPercentage(Instances data, Random random) throws Exception {
    return 0;
  }

  public static String classifyWithRules(Instances data, Instance instanceToClassify) throws Exception {
    return null;
  }

  public static int getNumOfRules(Instances data) throws Exception {
    return 0;
  }

  public static String classifyWithDecisionTree(Instances data, Instance instanceToClassify) throws Exception {
    return null;
  }

  public static List<Instance> getDecisionTreeIncorrectlyClassifiedInstances(Instances data, Random random)
          throws Exception {
    return Collections.emptyList();
  }

  public static String classifyWithCaseBasedReasoning(Instances data, Instance instanceToClassify) throws Exception {
    return null;
  }

  public static int getCBRNumSingleValueCorrectlyClassified(Instances data, String valueToCheck, Random random)
          throws Exception {
    return 0;
  }

}
